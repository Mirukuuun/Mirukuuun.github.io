<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Python学习笔记（一）</title>
      <link href="/2021/08/22/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2021/08/22/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a><strong>基础语法</strong></h2><h3 id="1-标识符"><a href="#1-标识符" class="headerlink" title="1.标识符"></a><strong>1.标识符</strong></h3><ul><li><p>第一个字符必须是字母表中字母或下划线 _ 。</p></li><li><p>标识符的其他的部分由字母、数字和下划线组成。</p></li><li><p>标识符对大小写敏感。</p></li></ul><hr><h3 id="2-保留字"><a href="#2-保留字" class="headerlink" title="2.保留字"></a><strong>2.保留字</strong></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> keyword<span class="token operator">>></span><span class="token operator">></span> keyword<span class="token punctuation">.</span>kwlist<span class="token punctuation">[</span><span class="token string">'False'</span><span class="token punctuation">,</span> <span class="token string">'None'</span><span class="token punctuation">,</span> <span class="token string">'True'</span><span class="token punctuation">,</span> <span class="token string">'and'</span><span class="token punctuation">,</span> <span class="token string">'as'</span><span class="token punctuation">,</span> <span class="token string">'assert'</span><span class="token punctuation">,</span> <span class="token string">'break'</span><span class="token punctuation">,</span> <span class="token string">'class'</span><span class="token punctuation">,</span> <span class="token string">'continue'</span><span class="token punctuation">,</span> <span class="token string">'def'</span><span class="token punctuation">,</span> <span class="token string">'del'</span><span class="token punctuation">,</span> <span class="token string">'elif'</span><span class="token punctuation">,</span> <span class="token string">'else'</span><span class="token punctuation">,</span> <span class="token string">'except'</span><span class="token punctuation">,</span> <span class="token string">'finally'</span><span class="token punctuation">,</span> <span class="token string">'for'</span><span class="token punctuation">,</span> <span class="token string">'from'</span><span class="token punctuation">,</span> <span class="token string">'global'</span><span class="token punctuation">,</span> <span class="token string">'if'</span><span class="token punctuation">,</span> <span class="token string">'import'</span><span class="token punctuation">,</span> <span class="token string">'in'</span><span class="token punctuation">,</span> <span class="token string">'is'</span><span class="token punctuation">,</span> <span class="token string">'lambda'</span><span class="token punctuation">,</span> <span class="token string">'nonlocal'</span><span class="token punctuation">,</span> <span class="token string">'not'</span><span class="token punctuation">,</span> <span class="token string">'or'</span><span class="token punctuation">,</span> <span class="token string">'pass'</span><span class="token punctuation">,</span> <span class="token string">'raise'</span><span class="token punctuation">,</span> <span class="token string">'return'</span><span class="token punctuation">,</span> <span class="token string">'try'</span><span class="token punctuation">,</span> <span class="token string">'while'</span><span class="token punctuation">,</span> <span class="token string">'with'</span><span class="token punctuation">,</span> <span class="token string">'yield'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h3 id="3-注释"><a href="#3-注释" class="headerlink" title="3.注释"></a><strong>3.注释</strong></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 第一个注释</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Hello world!"</span><span class="token punctuation">)</span> <span class="token comment">#第二个注释</span>```多行注释```<span class="token triple-quoted-string string">"""多行注释二多行注释三"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="4-行与缩进"><a href="#4-行与缩进" class="headerlink" title="4.行与缩进"></a><strong>4.行与缩进</strong></h3><p>python最具特色的就是使用缩进来表示代码块，不需要使用大括号 {} 。</p><p>缩进的空格数是可变的，但是同一个代码块的语句必须包含相同的缩进空格数。实例如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"True"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"False"</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Answer"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"True"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"Answer"</span><span class="token punctuation">)</span>  <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">"False"</span><span class="token punctuation">)</span>    <span class="token comment"># 缩进不一致，会导致运行错误</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="5-多行语句"><a href="#5-多行语句" class="headerlink" title="5.多行语句"></a><strong>5.多行语句</strong></h3><p>Python 通常是一行写完一条语句，但如果语句很长，我们可以使用反斜杠 \ 来实现多行语句，例如：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">total <span class="token operator">=</span> item_one <span class="token operator">+</span> \        item_two <span class="token operator">+</span> \        item_three<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在 [], {}, 或 () 中的多行语句，不需要使用反斜杠 \，例如：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">total <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'item_one'</span><span class="token punctuation">,</span> <span class="token string">'item_two'</span><span class="token punctuation">,</span> <span class="token string">'item_three'</span><span class="token punctuation">,</span>        <span class="token string">'item_four'</span><span class="token punctuation">,</span> <span class="token string">'item_five'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><h3 id="6-数字类型-Number"><a href="#6-数字类型-Number" class="headerlink" title="6.数字类型(Number)"></a><strong>6.数字类型(Number)</strong></h3><p>python中数字有四种类型：整数、布尔型、浮点数和复数。</p><ul><li>int (整数), 如 1, 只有一种整数类型 int，表示为长整型，没有 python2 中的 Long。</li><li>bool (布尔), 如 True。</li><li>float (浮点数), 如 1.23、3E-2</li><li>complex (复数), 如 1 + 2j、 1.1 + 2.2j</li></ul><hr><h3 id="7-字符串-String"><a href="#7-字符串-String" class="headerlink" title="7.字符串(String)"></a><strong>7.字符串(String)</strong></h3><ul><li>python中单引号和双引号使用完全相同。</li><li>使用<strong>三引号(‘’’ 或 “””)可以指定一个多行字符串</strong>。</li><li>转义符 \</li><li>反斜杠可以用来转义，<strong>使用r可以让反斜杠不发生转义</strong>。 如 r”this is a line with \n” 则\n会显示，并不是换行。</li><li>按字面意义级联字符串，如”this “ “is “ “string”会被自动转换为this is string。</li><li>字符串可以用 + 运算符连接在一起，用 * 运算符重复。</li><li>Python 中的字符串有两种索引方式，<strong>从左往右以 0 开始，从右往左以 -1 开始</strong>。</li><li>Python中的字符串不能改变。</li><li>Python 没有单独的字符类型，一个字符就是长度为 1 的字符串。</li><li>字符串的截取的语法格式如下：**变量[头下标:尾下标:步长]**（从头下标指向位置开始，到尾下标指向位置前一位）</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">word <span class="token operator">=</span> <span class="token string">'字符串'</span>sentence <span class="token operator">=</span> <span class="token string">"这是一个句子。"</span>paragraph <span class="token operator">=</span> <span class="token triple-quoted-string string">"""这是一个段落，可以由多行组成"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>以下是一个实例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">str</span><span class="token operator">=</span><span class="token string">'123456789'</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span>                 <span class="token comment"># 输出字符串 123456789</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>           <span class="token comment"># 输出第一个到倒数第二个的所有字符 12345678</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>              <span class="token comment"># 输出字符串第一个字符 1</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token comment"># 输出从第三个开始到第五个的字符 345</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>             <span class="token comment"># 输出从第三个开始后的所有字符 3456789</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>          <span class="token comment"># 输出从第二个开始到第五个且每隔一个的字符（步长为2） 24</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>             <span class="token comment"># 输出字符串两次 123456789123456789</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span> <span class="token operator">+</span> <span class="token string">'你好'</span><span class="token punctuation">)</span>         <span class="token comment"># 连接字符串 123456789你好</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'------------------------------'</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'hello\nmilk'</span><span class="token punctuation">)</span>      <span class="token comment"># 使用反斜杠(\)+n转义特殊字符 hello \换行 milk</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">r'hello\nmilk'</span><span class="token punctuation">)</span>     <span class="token comment"># 在字符串前面添加一个 r，表示原始字符串，不会发生转义 hello\nmilk</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="8-空行"><a href="#8-空行" class="headerlink" title="8.空行"></a><strong>8.空行</strong></h3><p>函数之间或类的方法之间用空行分隔，表示一段新的代码的开始。类和函数入口之间也用一行空行分隔，以突出函数入口的开始。</p><p>空行与代码缩进不同，空行并不是Python语法的一部分。书写时不插入空行，Python解释器运行也不会出错。但是空行的作用在于分隔两段不同功能或含义的代码，便于日后代码的维护或重构。</p><h2 id="记住：空行也是程序代码的一部分。"><a href="#记住：空行也是程序代码的一部分。" class="headerlink" title="记住：空行也是程序代码的一部分。"></a><strong>记住：</strong>空行也是程序代码的一部分。</h2><h3 id="9-等待用户输入"><a href="#9-等待用户输入" class="headerlink" title="9.等待用户输入"></a><strong>9.等待用户输入</strong></h3><p>执行下面的程序在按回车键后就会等待用户输入：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"\n\n按下 enter 键后退出。"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="以上代码中-，”-n-n”在结果输出前会输出两个新的空行。一旦用户按下-enter-键时，程序将退出。"><a href="#以上代码中-，”-n-n”在结果输出前会输出两个新的空行。一旦用户按下-enter-键时，程序将退出。" class="headerlink" title="以上代码中 ，”\n\n”在结果输出前会输出两个新的空行。一旦用户按下 enter 键时，程序将退出。"></a>以上代码中 ，”\n\n”在结果输出前会输出两个新的空行。一旦用户按下 enter 键时，程序将退出。</h2><h3 id="10-同一行显示多条语句"><a href="#10-同一行显示多条语句" class="headerlink" title="10.同一行显示多条语句"></a><strong>10.同一行显示多条语句</strong></h3><p>Python 可以在同一行中使用多条语句，语句之间使用分号 ; 分割，以下是一个简单的实例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token punctuation">;</span> x <span class="token operator">=</span> <span class="token string">'milk'</span><span class="token punctuation">;</span> sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>write<span class="token punctuation">(</span>x <span class="token operator">+</span> <span class="token string">'\n'</span><span class="token punctuation">)</span><span class="token comment">#输出结果：milk</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><h3 id="11-多个语句构成代码组"><a href="#11-多个语句构成代码组" class="headerlink" title="11.多个语句构成代码组"></a><strong>11.多个语句构成代码组</strong></h3><p>缩进相同的一组语句构成一个代码块，我们称之代码组。</p><p>像if、while、def和class这样的复合语句，首行以关键字开始，以冒号( : )结束，该行之后的一行或多行代码构成代码组。</p><p>我们将首行及后面的代码组称为一个子句(clause)。</p><p>如下实例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> expression <span class="token punctuation">:</span>    suite<span class="token keyword">elif</span> expression <span class="token punctuation">:</span>    suite <span class="token keyword">else</span> <span class="token punctuation">:</span>    suite<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="12-print输出"><a href="#12-print输出" class="headerlink" title="12.print输出"></a><strong>12.print输出</strong></h3><p>print 默认输出是换行的，如果要实现不换行需要在变量末尾加上 end=””：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">x<span class="token operator">=</span><span class="token string">"a"</span>y<span class="token operator">=</span><span class="token string">"b"</span><span class="token comment"># 换行输出</span><span class="token keyword">print</span><span class="token punctuation">(</span> x <span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> y <span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'---------'</span><span class="token punctuation">)</span><span class="token comment"># 不换行输出</span><span class="token keyword">print</span><span class="token punctuation">(</span> x<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">" "</span> <span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span> y<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">" "</span> <span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""输出结果：ab---------a b"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="13-import-and-from…import"><a href="#13-import-and-from…import" class="headerlink" title="13.import and from…import"></a><strong>13.import and from…import</strong></h3><p>在 python 用 <code>import</code> 或者 <code>from...import</code> 来导入相应的模块。</p><ul><li>将整个模块(somemodule)导入，格式为： <code>import somemodule</code></li><li>从某个模块中导入某个函数,格式为： <code>from somemodule import somefunction</code></li><li>从某个模块中导入多个函数,格式为： <code>from somemodule import firstfunc, secondfunc, thirdfunc</code></li><li>将某个模块中的全部函数导入，格式为： <code>from somemodule import *</code></li></ul><hr><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a><strong>基本数据类型</strong></h2><h3 id="1-变量"><a href="#1-变量" class="headerlink" title="1.变量"></a><strong>1.变量</strong></h3><p>Python 中的变量不需要声明。每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。</p><p>在 Python 中，变量就是变量，它没有类型，我们所说的”类型”是变量所指的内存中对象的类型。</p><p>等号（=）用来给变量赋值。</p><p>等号（=）运算符左边是一个变量名,等号（=）运算符右边是存储在变量中的值。例如：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">counter <span class="token operator">=</span> <span class="token number">100</span>          <span class="token comment"># 整型变量</span>miles   <span class="token operator">=</span> <span class="token number">1000.0</span>       <span class="token comment"># 浮点型变量</span>name    <span class="token operator">=</span> <span class="token string">"runoob"</span>     <span class="token comment"># 字符串</span><span class="token keyword">print</span> <span class="token punctuation">(</span>counter<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>miles<span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="2-多个变量赋值"><a href="#2-多个变量赋值" class="headerlink" title="2.多个变量赋值"></a><strong>2.多个变量赋值</strong></h3><p>python允许为多个变量同时赋值。如：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> b <span class="token operator">=</span> c <span class="token operator">=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>以上实例，创建一个整型对象，值为 1，从后向前赋值，三个变量被赋予相同的数值。</p><p>您也可以为多个对象指定多个变量。例如：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"milk"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h3 id="3-标准数据类型"><a href="#3-标准数据类型" class="headerlink" title="3.标准数据类型"></a><strong>3.标准数据类型</strong></h3><p>Python3 中有六个标准的数据类型：</p><ul><li>Number（数字）</li><li>String（字符串）</li><li>List（列表）</li><li>Tuple（元组）</li><li>Set（集合）</li><li>Dictionary（字典）</li></ul><p>Python3 的六个标准数据类型中：</p><ul><li>不可变数据（3 个）：Number（数字）、String（字符串）、Tuple（元组）；</li><li>可变数据（3 个）：List（列表）、Dictionary（字典）、Set（集合）。</li></ul><hr><h3 id="4-Number"><a href="#4-Number" class="headerlink" title="4.Number"></a><strong>4.Number</strong></h3><p>Python3 支持 int、float、bool、complex（复数）。</p><p>在Python 3里，只有一种整数类型 int，表示为长整型，没有 python2 中的 Long。</p><p>像大多数语言一样，数值类型的赋值和计算都是很直观的。</p><p>内置的 type() 函数可以用来查询变量所指的对象类型。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> d <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">5.5</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token operator">+</span><span class="token number">3j</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'int'</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'float'</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'bool'</span><span class="token operator">></span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token string">'complex'</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>此外还可以用 isinstance 来判断：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">111</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>isinstance 和 type 的区别在于：</p><ul><li>type()不会认为子类是一种父类类型。</li><li>isinstance()会认为子类是一种父类类型。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">pass</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>     <span class="token keyword">pass</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>A<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> A<span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">type</span><span class="token punctuation">(</span>A<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> A <span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>B<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> A<span class="token punctuation">)</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">type</span><span class="token punctuation">(</span>B<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> A<span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>注意：Python3 中，bool 是 int 的子类，True 和 False 可以和数字相加 True==1，False==0 是会返回 True，但可以通过 is 来判断类型。</em></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">issubclass</span><span class="token punctuation">(</span><span class="token builtin">bool</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> <span class="token boolean">True</span><span class="token operator">==</span><span class="token number">1</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> <span class="token boolean">False</span><span class="token operator">==</span><span class="token number">0</span><span class="token boolean">True</span><span class="token operator">>></span><span class="token operator">></span> <span class="token boolean">True</span><span class="token operator">+</span><span class="token number">1</span><span class="token number">2</span><span class="token operator">>></span><span class="token operator">></span> <span class="token boolean">False</span><span class="token operator">+</span><span class="token number">1</span><span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">1</span> <span class="token keyword">is</span> <span class="token boolean">True</span><span class="token boolean">False</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">0</span> <span class="token keyword">is</span> <span class="token boolean">False</span><span class="token boolean">False</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当你指定一个值时，Number 对象就会被创建：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">var1 <span class="token operator">=</span> <span class="token number">1</span>var2 <span class="token operator">=</span> <span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>您也可以使用del语句删除一些对象引用。</p><p>del语句的语法是：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">del</span> var1<span class="token punctuation">[</span><span class="token punctuation">,</span>var2<span class="token punctuation">[</span><span class="token punctuation">,</span>var3<span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>varN<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>您可以通过使用del语句删除单个或多个对象。例如：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">del</span> var<span class="token keyword">del</span> var_a<span class="token punctuation">,</span> var_b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><hr><h3 id="5-数值运算"><a href="#5-数值运算" class="headerlink" title="5.数值运算"></a><strong>5.数值运算</strong></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token number">4</span>  <span class="token comment"># 加法</span><span class="token number">9</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">4.3</span> <span class="token operator">-</span> <span class="token number">2</span> <span class="token comment"># 减法</span><span class="token number">2.3</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">7</span>  <span class="token comment"># 乘法</span><span class="token number">21</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">2</span> <span class="token operator">/</span> <span class="token number">4</span>  <span class="token comment"># 除法，得到一个浮点数</span><span class="token number">0.5</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">2</span> <span class="token operator">//</span> <span class="token number">4</span> <span class="token comment"># 除法，得到一个整数</span><span class="token number">0</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">17</span> <span class="token operator">%</span> <span class="token number">3</span> <span class="token comment"># 取余</span><span class="token number">2</span><span class="token operator">>></span><span class="token operator">></span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token number">5</span> <span class="token comment"># 乘方</span><span class="token number">32</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：</p><ul><li>Python可以同时为多个变量赋值，如a, b = 1, 2。</li><li>一个变量可以通过赋值指向不同类型的对象。</li><li>数值的除法包含两个运算符：/ 返回一个浮点数，// 返回一个整数。</li><li>在混合计算时，Python会把整型转换成为浮点数。</li></ul><hr><h3 id="6-String"><a href="#6-String" class="headerlink" title="6.String"></a><strong>6.String</strong></h3><p>Python中的字符串用单引号 <code>&#39;</code> 或双引号 <code>&quot;</code> 括起来，同时使用反斜杠 <code>\</code> 转义特殊字符。</p><p>字符串的截取的语法格式如下：<strong>变量[头下标:尾下标:步长]</strong></p><hr><h3 id="7-List"><a href="#7-List" class="headerlink" title="7.List"></a><strong>7.List</strong></h3><p>List（列表） 是 Python 中使用最频繁的数据类型。</p><p>列表可以完成大多数集合类的数据结构实现。列表中元素的类型可以不相同，它支持数字，字符串甚至可以包含列表（所谓嵌套）。</p><p>列表是写在方括号 [] 之间、用逗号分隔开的元素列表。</p><p>和字符串一样，列表同样可以被索引和截取，列表被截取后返回一个包含所需元素的新列表。</p><p>列表截取的语法格式如下： <strong>变量[头下标:尾下标:步长]</strong></p><center>    <img src="https://blog-1305377272.cos.ap-shanghai.myqcloud.com/images/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E4%B8%80/1.png" loading="lazy">    <div style="font-size: smaller;color: grey;"><b>截取示例</b></div></center><center>    <img src="https://blog-1305377272.cos.ap-shanghai.myqcloud.com/images/Python%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/%E4%B8%80/2.png" loading="lazy">    <div style="font-size: smaller;color: grey;"><b>截取步长示例</b></div></center><p><em>如果步长参数为负数，表示逆向读取，以下实例用于翻转字符串：</em></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">reverseWords</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 通过空格将字符串分隔符，把各个单词分隔为列表</span>    inputWords <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span>    <span class="token comment"># 翻转字符串</span>    <span class="token comment"># 假设列表 list = [1,2,3,4],  </span>    <span class="token comment"># list[0]=1, list[1]=2 ，而 -1 表示最后一个元素 list[-1]=4 ( 与 list[3]=4 一样)</span>    <span class="token comment"># inputWords[-1::-1] 有三个参数</span>    <span class="token comment"># 第一个参数 -1 表示最后一个元素</span>    <span class="token comment"># 第二个参数为空，表示移动到列表末尾</span>    <span class="token comment"># 第三个参数为步长，-1 表示逆向</span>    inputWords <span class="token operator">=</span> inputWords<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token comment"># 重新组合字符串</span>    output <span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>inputWords<span class="token punctuation">)</span>    <span class="token keyword">return</span> output<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token builtin">input</span> <span class="token operator">=</span> <span class="token string">'I am milk'</span>    rw <span class="token operator">=</span> reverseWords<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>rw<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果为：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">milk am I<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>加号 + 是列表连接运算符，星号 * 是重复操作。如下实例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">list</span> <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token string">'abcd'</span><span class="token punctuation">,</span> <span class="token number">786</span> <span class="token punctuation">,</span> <span class="token number">2.23</span><span class="token punctuation">,</span> <span class="token string">'milk'</span><span class="token punctuation">,</span> <span class="token number">70.2</span> <span class="token punctuation">]</span>tinylist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token string">'milk'</span><span class="token punctuation">]</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span>            <span class="token comment"># 输出完整列表</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>         <span class="token comment"># 输出列表第一个元素</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>       <span class="token comment"># 从第二个开始输出到第三个元素</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment"># 输出从第三个元素开始的所有元素</span><span class="token keyword">print</span> <span class="token punctuation">(</span>tinylist <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>    <span class="token comment"># 输出两次列表</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token builtin">list</span> <span class="token operator">+</span> tinylist<span class="token punctuation">)</span> <span class="token comment"># 连接列表</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上实例输出结果：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">[</span><span class="token string">'abcd'</span><span class="token punctuation">,</span> <span class="token number">786</span><span class="token punctuation">,</span> <span class="token number">2.23</span><span class="token punctuation">,</span> <span class="token string">'milk'</span><span class="token punctuation">,</span> <span class="token number">70.2</span><span class="token punctuation">]</span>abcd<span class="token punctuation">[</span><span class="token number">786</span><span class="token punctuation">,</span> <span class="token number">2.23</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2.23</span><span class="token punctuation">,</span> <span class="token string">'milk'</span><span class="token punctuation">,</span> <span class="token number">70.2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token string">'milk'</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token string">'milk'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'abcd'</span><span class="token punctuation">,</span> <span class="token number">786</span><span class="token punctuation">,</span> <span class="token number">2.23</span><span class="token punctuation">,</span> <span class="token string">'milk'</span><span class="token punctuation">,</span> <span class="token number">70.2</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token string">'milk'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>与Python字符串不一样的是，列表中的元素是可以改变的：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>   <span class="token comment"># 将对应的元素值设置为 []</span><span class="token operator">>></span><span class="token operator">></span> a<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="8-Tuple"><a href="#8-Tuple" class="headerlink" title="8.Tuple"></a><strong>8.Tuple</strong></h3><p>元组（tuple）与列表类似，不同之处在于<strong>元组的元素不能修改</strong>。元组写在小括号 () 里，元素之间用逗号隔开。</p><p>元组中的元素类型也可以不相同：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">tuple</span> <span class="token operator">=</span> <span class="token punctuation">(</span> <span class="token string">'abcd'</span><span class="token punctuation">,</span> <span class="token number">786</span> <span class="token punctuation">,</span> <span class="token number">2.23</span><span class="token punctuation">,</span> <span class="token string">'milk'</span><span class="token punctuation">,</span> <span class="token number">70.2</span>  <span class="token punctuation">)</span>tinytuple <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token string">'milk'</span><span class="token punctuation">)</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token builtin">tuple</span><span class="token punctuation">)</span>             <span class="token comment"># 输出完整元组</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token builtin">tuple</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>          <span class="token comment"># 输出元组的第一个元素</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token builtin">tuple</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment"># 输出从第二个元素开始到第三个元素</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token builtin">tuple</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>         <span class="token comment"># 输出从第三个元素开始的所有元素</span><span class="token keyword">print</span> <span class="token punctuation">(</span>tinytuple <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>     <span class="token comment"># 输出两次元组</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token builtin">tuple</span> <span class="token operator">+</span> tinytuple<span class="token punctuation">)</span> <span class="token comment"># 连接元组</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上实例输出结果：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">(</span><span class="token string">'abcd'</span><span class="token punctuation">,</span> <span class="token number">786</span><span class="token punctuation">,</span> <span class="token number">2.23</span><span class="token punctuation">,</span> <span class="token string">'milk'</span><span class="token punctuation">,</span> <span class="token number">70.2</span><span class="token punctuation">)</span>abcd<span class="token punctuation">(</span><span class="token number">786</span><span class="token punctuation">,</span> <span class="token number">2.23</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2.23</span><span class="token punctuation">,</span> <span class="token string">'milk'</span><span class="token punctuation">,</span> <span class="token number">70.2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">,</span> <span class="token string">'milk'</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token string">'milk'</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'abcd'</span><span class="token punctuation">,</span> <span class="token number">786</span><span class="token punctuation">,</span> <span class="token number">2.23</span><span class="token punctuation">,</span> <span class="token string">'milk'</span><span class="token punctuation">,</span> <span class="token number">70.2</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token string">'milk'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>元组与字符串类似，可以被索引且下标索引从0开始，-1 为从末尾开始的位置。也可以进行截取（看上面，这里不再赘述）。</p><p>其实，可以把字符串看作一种特殊的元组。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> tup <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>tup<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token number">1</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>tup<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> tup<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">11</span>  <span class="token comment"># 修改元组元素的操作是非法的</span>Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"&lt;stdin>"</span><span class="token punctuation">,</span> line <span class="token number">1</span><span class="token punctuation">,</span> <span class="token keyword">in</span> <span class="token operator">&lt;</span>module<span class="token operator">></span>TypeError<span class="token punctuation">:</span> <span class="token string">'tuple'</span> <span class="token builtin">object</span> does <span class="token keyword">not</span> support item assignment<span class="token operator">>></span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>虽然tuple的元素不可改变，但它可以包含可变的对象，比如list列表。</p><p>构造包含 0 个或 1 个元素的元组比较特殊，所以有一些额外的语法规则：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">tup1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 空元组</span>tup2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token comment"># 一个元素，需要在元素后添加逗号</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>string、list 和 tuple 都属于 sequence（序列）。</p><p><strong>注意：</strong></p><ul><li>与字符串一样，元组的元素不能修改。</li><li>元组也可以被索引和切片，方法一样。</li><li>注意构造包含 0 或 1 个元素的元组的特殊语法规则。</li><li>元组也可以使用+操作符进行拼接。</li></ul><hr><h3 id="9-Set"><a href="#9-Set" class="headerlink" title="9.Set"></a><strong>9.Set</strong></h3><p>集合（set）是由一个或数个形态各异的大小整体组成的，构成集合的事物或对象称作元素或是成员。</p><p>基本功能是进行成员关系测试和删除重复元素。</p><p>可以使用大括号 { } 或者 set() 函数创建集合，注意：创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典。</p><p>创建格式：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">parame <span class="token operator">=</span> <span class="token punctuation">&#123;</span>value01<span class="token punctuation">,</span>value02<span class="token punctuation">,</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token comment">#或者</span><span class="token builtin">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">sites <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'Google'</span><span class="token punctuation">,</span> <span class="token string">'Taobao'</span><span class="token punctuation">,</span> <span class="token string">'mimiruku'</span><span class="token punctuation">,</span> <span class="token string">'bilibili'</span><span class="token punctuation">,</span> <span class="token string">'Zhihu'</span><span class="token punctuation">,</span> <span class="token string">'Baidu'</span><span class="token punctuation">&#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>sites<span class="token punctuation">)</span>   <span class="token comment"># 输出集合，重复的元素被自动去掉</span><span class="token comment"># 成员测试</span><span class="token keyword">if</span> <span class="token string">'mimiruku'</span> <span class="token keyword">in</span> sites <span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'mimiruku 在集合中'</span><span class="token punctuation">)</span><span class="token keyword">else</span> <span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'mimiruku 不在集合中'</span><span class="token punctuation">)</span><span class="token comment"># set可以进行集合运算</span>a <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">'abracadabra'</span><span class="token punctuation">)</span>b <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">'alacazam'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">-</span> b<span class="token punctuation">)</span>     <span class="token comment"># a 和 b 的差集</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">|</span> b<span class="token punctuation">)</span>     <span class="token comment"># a 和 b 的并集</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">&amp;</span> b<span class="token punctuation">)</span>     <span class="token comment"># a 和 b 的交集</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">^</span> b<span class="token punctuation">)</span>     <span class="token comment"># a 和 b 中不同时存在的元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">&#123;</span><span class="token string">'Zhihu'</span><span class="token punctuation">,</span> <span class="token string">'Baidu'</span><span class="token punctuation">,</span> <span class="token string">'Taobao'</span><span class="token punctuation">,</span> <span class="token string">'mimiruku'</span><span class="token punctuation">,</span> <span class="token string">'Google'</span><span class="token punctuation">,</span> <span class="token string">'bilibili'</span><span class="token punctuation">&#125;</span>mimiruku 在集合中<span class="token punctuation">&#123;</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">,</span> <span class="token string">'m'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token string">'z'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'m'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token string">'l'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="10-Dictionary"><a href="#10-Dictionary" class="headerlink" title="10.Dictionary"></a><strong>10.Dictionary</strong></h3><p>字典（dictionary）是Python中另一个非常有用的内置数据类型。</p><p>列表是有序的对象集合，字典是无序的对象集合。两者之间的区别在于：字典当中的元素是通过键来存取的，而不是通过偏移存取。</p><p>字典是一种映射类型，字典用 { } 标识，它是一个无序的 键(key) : 值(value) 的集合。</p><p>键(key)必须使用不可变类型。</p><p>在同一个字典中，键(key)必须是唯一的。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">dict</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token builtin">dict</span><span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"1 - milk"</span><span class="token builtin">dict</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>     <span class="token operator">=</span> <span class="token string">"2 - miruku"</span>tinydict <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'milk'</span><span class="token punctuation">,</span><span class="token string">'code'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'site'</span><span class="token punctuation">:</span> <span class="token string">'www.miruku.top'</span><span class="token punctuation">&#125;</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">[</span><span class="token string">'one'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>       <span class="token comment"># 输出键为 'one' 的值</span><span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token builtin">dict</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>           <span class="token comment"># 输出键为 2 的值</span><span class="token keyword">print</span> <span class="token punctuation">(</span>tinydict<span class="token punctuation">)</span>          <span class="token comment"># 输出完整的字典</span><span class="token keyword">print</span> <span class="token punctuation">(</span>tinydict<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 输出所有键</span><span class="token keyword">print</span> <span class="token punctuation">(</span>tinydict<span class="token punctuation">.</span>values<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 输出所有值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">1</span> <span class="token operator">-</span> milk<span class="token number">2</span> <span class="token operator">-</span> miruku<span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span> <span class="token string">'milk'</span><span class="token punctuation">,</span> <span class="token string">'code'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'site'</span><span class="token punctuation">:</span> <span class="token string">'www.miruku.top'</span><span class="token punctuation">&#125;</span>dict_keys<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'code'</span><span class="token punctuation">,</span> <span class="token string">'site'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>dict_values<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'runoob'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'www.runoob.com'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>构造函数 dict() 可以直接从键值对序列中构建字典如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">'Runoob'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'Google'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">'Taobao'</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token string">'Runoob'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'Google'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'Taobao'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token operator">>></span><span class="token operator">></span> <span class="token punctuation">&#123;</span>x<span class="token punctuation">:</span> x<span class="token operator">**</span><span class="token number">2</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">:</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">:</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">:</span> <span class="token number">36</span><span class="token punctuation">&#125;</span><span class="token operator">>></span><span class="token operator">></span> <span class="token builtin">dict</span><span class="token punctuation">(</span>Runoob<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> Google<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> Taobao<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token string">'Runoob'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'Google'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'Taobao'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token operator">>></span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另外，字典类型也有一些内置的函数，例如clear()、keys()、values()等。</p><p><strong>注意：</strong></p><p>1、字典是一种映射类型，它的元素是键值对。<br>2、字典的关键字必须为不可变类型，且不能重复。<br>3、创建空字典使用 { }。</p><hr><h3 id="11-Python数据类型转换"><a href="#11-Python数据类型转换" class="headerlink" title="11.Python数据类型转换"></a><strong>11.Python数据类型转换</strong></h3><p>有时候，我们需要对数据内置的类型进行转换，数据类型的转换，你只需要将数据类型作为函数名即可。</p><p>以下几个内置的函数可以执行数据类型之间的转换。这些函数返回一个新的对象，表示转换的值。</p><table><tbody>    <tr>        <td><font color="white" bgcolor="black"  margin-left="auto" margin-right="auto">函数</font></td>        <td><font color="white" bgcolor="black">描述</font></td>    </tr>    <tr>        <td><font >int(x [,base])</font></td>        <td><font >将x转换为一个整数</font></td>    </tr>    <tr>        <td><font >float(x)</font></td>        <td><font >将x转换到一个浮点数</font></td>    </tr>    <tr>        <td><font >complex(real [,imag])</font></td>        <td><font >创建一个复数</font></td>    </tr>    <tr>        <td><font >str(x)</font></td>        <td><font >将对象 x 转换为字符串</font></td>    </tr>    <tr>        <td><font >repr(x)</font></td>        <td><font >将对象 x 转换为表达式字符串</font></td>    </tr>    <tr>        <td><font >eval(str)</font></td>        <td><font >用来计算在字符串中的有效Python表达式,并返回一个对象</font></td>    </tr>    <tr>        <td><font >tuple(s)</font></td>        <td><font >将序列 s 转换为一个元组</font></td>    </tr>    <tr>        <td><font >list(s)</font></td>        <td><font >将序列 s 转换为一个列表</font></td>    </tr>    <tr>        <td><font >set(s)</font></td>        <td><font >转换为可变集合</font></td>    </tr>    <tr>        <td><font >dict(d)</font></td>        <td><font >创建一个字典,d 必须是一个 (key, value)元组序列</font></td>    </tr>    <tr>        <td><font >frozenset(s)</font></td>        <td><font >转换为不可变集合</font></td>    </tr>    <tr>        <td><font >chr(x)</font></td>        <td><font >将一个整数转换为一个字符</font></td>    </tr>    <tr>        <td><font >ord(x)</font></td>        <td><font >将一个字符转换为它的整数值</font></td>    </tr>    <tr>        <td><font >hex(x)</font></td>        <td><font >将一个整数转换为一个十六进制字符串</font></td>    </tr>    <tr>        <td><font >oct(x)</font></td>        <td><font >将一个整数转换为一个八进制字符串</font></td>    </tr></tbody></table><div ><table><thead><tr><th align="center"><font color="white" bgcolor="black">函数</font></th><th align="center"><font color="white" bgcolor="black">描述</font></th></tr></thead><tbody><tr><td align="center">int(x [,base])</td><td align="center">将x转换为一个整数</td></tr><tr><td align="center">float(x)</td><td align="center">将x转换到一个浮点数</td></tr><tr><td align="center">complex(real [,imag])</td><td align="center">创建一个复数</td></tr><tr><td align="center">str(x)</td><td align="center">将对象x转换为字符串</td></tr><tr><td align="center">repr(x)</td><td align="center">将对象 x 转换为表达式字符串</td></tr><tr><td align="center">eval(str)</td><td align="center">用来计算在字符串中的有效Python表达式,并返回一个对象</td></tr><tr><td align="center">tuple(s)</td><td align="center">将序列 s 转换为一个元组</td></tr><tr><td align="center">list(s)</td><td align="center">将序列 s 转换为一个列表</td></tr><tr><td align="center">set(s)</td><td align="center">转换为可变集合</td></tr><tr><td align="center">dict(d)</td><td align="center">创建一个字典,d 必须是一个 (key, value)元组序列</td></tr><tr><td align="center">frozenset(s)</td><td align="center">转换为不可变集合</td></tr><tr><td align="center">chr(x)</td><td align="center">将一个整数转换为一个字符</td></tr><tr><td align="center">ord(x)</td><td align="center">将一个字符转换为它的整数值</td></tr><tr><td align="center">hex(x)</td><td align="center">将一个整数转换为一个十六进制字符串</td></tr><tr><td align="center">oct(x)</td><td align="center">将一个整数转换为一个八进制字符串</td></tr></tbody></table></div>]]></content>
      
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="/2021/08/21/test/"/>
      <url>/2021/08/21/test/</url>
      
        <content type="html"><![CDATA[<h2 id="播放音乐"><a href="#播放音乐" class="headerlink" title="播放音乐"></a>播放音乐</h2>    <div id="aplayer-pCEtEzpp" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="497572729" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#C20C0C"    ></div><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> <span class="token punctuation">..</span><span class="token function">mkdir</span> a<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>腾讯云+hexo搭建个人博客</title>
      <link href="/2021/08/21/%E8%85%BE%E8%AE%AF%E4%BA%91+hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
      <url>/2021/08/21/%E8%85%BE%E8%AE%AF%E4%BA%91+hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[    <div id="aplayer-MxgpGpWO" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="523845661" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="true" data-theme="#FF4081"    ></div><p><font size=1>本文根据：<a href="https://fuchenchenle.cn/">Fuchenchenle</a> 的博客进行修改，如有侵权请联系删除</font></p><hr><h2 id="本地Hexo部署"><a href="#本地Hexo部署" class="headerlink" title="本地Hexo部署"></a>本地Hexo部署</h2><h3 id="1-安装node-js与git"><a href="#1-安装node-js与git" class="headerlink" title="1.安装node.js与git"></a>1.安装node.js与git</h3><p><a href="https://git-scm.com/downloads"><u>git下载</u></a></p><p><a href="https://nodejs.org/zh-cn/"><u>node.js下载</u></a></p><p>安装后在cmd当中进行验证：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> --versionnode -v<span class="token function">npm</span> -v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>未出现问题则安装成功，否则请重新安装或检查你的环境变量。</p><h3 id="2-markdown编辑器下载"><a href="#2-markdown编辑器下载" class="headerlink" title="2.markdown编辑器下载"></a>2.markdown编辑器下载</h3><p>Hexo博客文章主要采用markdown语法来书写，我们需要使用markdown文本编辑器来进行文章的书写。我采用的是 vs code+markdown 插件来进行书写(vs code实在是太香辣，主要是我用习惯了qwq)。常用的其他编辑器还有</p><p><a href="https://www.typora.io/"><u>Typora下载</u></a></p><p><a href="http://markdownpad.com/"><u>MarkdownPad下载</u></a></p><h3 id="3-安装Hexo"><a href="#3-安装Hexo" class="headerlink" title="3.安装Hexo"></a>3.安装Hexo</h3><p>首先我们打开cmd，输入</p><p><code>npm install -g hexo-cli</code></p><p>安装完成后，我们切换到想要存放你的博客文件的磁盘，然后输入</p><p><code>hexo init blog</code></p><p>“blog”是你想要存放的文件夹名称，可以自己定义。安装完成后，我们进入blog目录</p><center>    <img src="https://blog-1305377272.cos.ap-shanghai.myqcloud.com/images/%E8%85%BE%E8%AE%AF%E4%BA%91%2Bhexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/1.png" loading="lazy">    <div style="font-size: smaller;color: grey;"><b>初始化hexo</b></div></center><p><code>cd blog</code></p><p>输入 <code>hexo s</code> 即可启动hexo。</p><center>    <img src="https://blog-1305377272.cos.ap-shanghai.myqcloud.com/images/%E8%85%BE%E8%AE%AF%E4%BA%91%2Bhexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/2.png" loading="lazy">    <div style="font-size: smaller;color: grey;"><b>启动hexo</b></div></center><p>在浏览器打开它提示的网站 localhost:4000 就能够看到我们的Hexo。</p><center>    <img src="https://blog-1305377272.cos.ap-shanghai.myqcloud.com/images/%E8%85%BE%E8%AE%AF%E4%BA%91%2Bhexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/3.png" loading="lazy">    <div style="font-size: smaller;color: grey;"><b>初始博客页面</b></div></center><p>到这一步，最基础的本地Hexo就安装完毕了。</p><h3 id="4-Hexo主题更换"><a href="#4-Hexo主题更换" class="headerlink" title="4.Hexo主题更换"></a>4.Hexo主题更换</h3><p>Hexo的默认主题是landscape，若想要更换其他的主题则需要进行下载安装。我才用的是<a href="https://github.com/YunYouJun/hexo-theme-yun">hexo-theme-yun</a>这个主题，它有详细的<a href="https://yun.yunyoujun.cn/guide/">使用指南</a>，可以根据使用指南进行安装和配置。这是该主题作者的主页：<a href="https://www.yunyoujun.cn/">云游君的小站</a>。</p><h3 id="5-博客的编写"><a href="#5-博客的编写" class="headerlink" title="5.博客的编写"></a>5.博客的编写</h3><p>安装好Hexo之后，如何进行博客的编写呢？首先我们需要在cmd中切换到你的博客文件夹根目录下，然后输入</p><p><code>hexo n 博客文件名称</code></p><center>    <img src="https://blog-1305377272.cos.ap-shanghai.myqcloud.com/images/%E8%85%BE%E8%AE%AF%E4%BA%91%2Bhexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/4.png" loading="lazy">    <div style="font-size: smaller;color: grey;"><b>创建博客文件</b></div></center><p>即可生成博客文件。我们可以在 blog\source_posts\ 文件夹下找到我们新创建的博客文件 test.md，我们可以使用markdown编辑器对它进行编辑。基础的markdown语法可以参考：<a href="https://www.runoob.com/markdown/md-tutorial.html">markdown语法</a>。</p><h2 id="云服务器的购买与配置"><a href="#云服务器的购买与配置" class="headerlink" title="云服务器的购买与配置"></a>云服务器的购买与配置</h2><h3 id="1-云服务器的购买"><a href="#1-云服务器的购买" class="headerlink" title="1.云服务器的购买"></a>1.云服务器的购买</h3><p>笔者购买的是腾讯云的学生特惠机，<a href="https://cloud.tencent.com/act/campus?from=14599"><del>一年只需108！！</del></a></p><p>使用其他的如阿里云等服务器也都是ok的，可以根据自己的需要<del>和财力</del>进行选择。</p><h3 id="2-云服务器的设置和连接"><a href="#2-云服务器的设置和连接" class="headerlink" title="2.云服务器的设置和连接"></a>2.云服务器的设置和连接</h3><p>首先我们进入到云服务器控制台，点击重置密码，设置我们服务器的密码。</p><center>    <img src="https://blog-1305377272.cos.ap-shanghai.myqcloud.com/images/%E8%85%BE%E8%AE%AF%E4%BA%91%2Bhexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/5.png" loading="lazy">    <div style="font-size: smaller;color: grey;"><b>设置密码</b></div></center><p>接下来就是连接到我们的云服务器。首先要下载一个xshell。（也可以使用其他的软件）</p><p><a href="https://xshell.en.softonic.com/"><u>Xshell下载</u></a></p><p>安装后，点击文件-&gt;新建，名称自行填写，主机输入我们服务器的公网ip地址，然后在左侧栏选择用户身份验证，在用户名中输入root，密码填写刚刚设置的服务器密码。</p><center>    <img src="https://blog-1305377272.cos.ap-shanghai.myqcloud.com/images/%E8%85%BE%E8%AE%AF%E4%BA%91%2Bhexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/6.png" loading="lazy">    <div style="font-size: smaller;color: grey;"><b>设置主机ip</b></div></center><center>    <br>    <img src="https://blog-1305377272.cos.ap-shanghai.myqcloud.com/images/%E8%85%BE%E8%AE%AF%E4%BA%91%2Bhexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/6.png" loading="lazy">    <div style="font-size: smaller;color: grey;"><b>填写用户名和密码</b></div></center><br>点击确定，在左侧的会话栏中双击即可连接至我们的服务器。<center>    <br>    <img src="https://blog-1305377272.cos.ap-shanghai.myqcloud.com/images/%E8%85%BE%E8%AE%AF%E4%BA%91%2Bhexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/8.png" loading="lazy">    <div style="font-size: smaller;color: grey;"><b>远程连接服务器</b></div></center><h3 id="3-云服务器的配置"><a href="#3-云服务器的配置" class="headerlink" title="3.云服务器的配置"></a>3.云服务器的配置</h3><p>安装依赖库</p><p><code>yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel </code></p><p>安装编译工具</p><p><code>yum install gcc perl-ExtUtils-MakeMaker package</code></p><p>查看git的版本</p><p><code>git version</code></p><p>删除git</p><p><code>yum remove git -y</code></p><p>下载解压最新版本</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /usr/local/src <span class="token comment">#下载的目录 </span><span class="token function">wget</span> https://www.kernel.org/pub/software/scm/git/git-2.28.0.tar.gz <span class="token comment">#下载最新版 </span><span class="token function">tar</span> -zxvf git-2.28.0.tar.gz <span class="token comment">#解压到当前文件夹</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>编辑并安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> git-2.28.0    <span class="token comment">#进入文件夹</span><span class="token function">make</span> <span class="token assign-left variable">prefix</span><span class="token operator">=</span>/usr/local/git all    <span class="token comment">#编译源码</span><span class="token function">make</span> <span class="token assign-left variable">prefix</span><span class="token operator">=</span>/usr/local/git <span class="token function">install</span>    <span class="token comment">#安装路径</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>配置git的环境变量</p><p><code>echo &#39;export PATH=$PATH:/usr/local/git/bin&#39; &gt;&gt; /etc/bashrc</code></p><p>刷新环境变量</p><p><code>source /etc/bashrc</code></p><p>查看版本号</p><p><code>git --version</code></p><p>创建git用户并修改权限</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">adduser milk <span class="token function">passwd</span> milk <span class="token function">chmod</span> <span class="token number">740</span> /etc/sudoers <span class="token function">vim</span> /etc/sudoers <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><kbd>shift</kbd>+<kbd>;</kbd> ，然后输入set number，来显示行号，找到第100行，点击i然后执行以下修改</p><pre class="line-numbers language-none"><code class="language-none">root ALL&#x3D;(ALL) ALL milk ALL&#x3D;(ALL) ALL<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>接下来，在本地你的blog文件夹下右键，点击Git Bash Here，然后输入以下内容，创建密钥。</p><p><code>ssh-keygen -t rsa</code></p><p>在它提示你的文件夹下，找到你的密钥文件id_rsa.pub，用记事本打开，复制全部内容。然后在xshell当中，执行以下命令，粘贴你的密钥。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">su</span> fuchen<span class="token function">mkdir</span> ~/.ssh<span class="token function">vim</span> ~/.ssh/authorized_keys<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后在本地的git中输入</p><p><code>ssh -v fuchen@服务器ip</code></p><p>并当它提示时输入服务器密码，连接至服务器。</p><p>###4.云服务器的网站配置<br>首先，我们在服务器上创建一个网站目录并且设置权限：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">su</span> root<span class="token function">mkdir</span> /home/hexo<span class="token function">chown</span> fuchen:fuchen -R /home/hexo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>然后安装Nginx</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">yum <span class="token function">install</span> -y nginxsystemctl start nginx.service    <span class="token comment">#启动服务</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>修改Nginx配置文件</p><pre class="line-numbers language-none"><code class="language-none">vim &#x2F;etc&#x2F;nginx&#x2F;nginx.conf 38 server &#123; 39 listen 80 default_server; 40 listen [::]:80 default_server; 41 server_name fuchenchenle.cn; #域名 42 root &#x2F;home&#x2F;hexo; #网站目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重启服务器</p><p><code>systemctl restart nginx.service</code></p><p>建立git仓库</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">su</span> root<span class="token builtin class-name">cd</span> /home/fuchen<span class="token function">git</span> init --bare blog.git<span class="token function">chown</span> fuchen:fuchen -R blog.git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>同步网站根目录</p><pre class="line-numbers language-none"><code class="language-none">vim blog.git&#x2F;hooks&#x2F;post-receive<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>输入以下内容</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/sh</span><span class="token function">git</span> --work-tree<span class="token operator">=</span>/home/hexo --git-dir<span class="token operator">=</span>/home/fuchen/blog.git checkout -f<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>修改权限</p><p><code>chmod +x /home/fuchen/blog.git/hooks/post-receive</code></p><p>在本地blog根目录下打开_config.yml文件进行以下修改：</p><pre class="line-numbers language-none"><code class="language-none">deploy:  type: git  repository: milk@xxx.xxx.xxx.xxx:&#x2F;home&#x2F;fuchen&#x2F;blog.git    #用户名@服务器Ip:git仓库位置  branch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在本地blog根目录下，右键打开gitbash，输入以下命令及服务器密码，将hexo部署到服务器。</p><pre class="line-numbers language-none"><code class="language-none">hexo cleanhexo g -d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>即可完成部署。</p><p>感谢阅读！<br>Thanks for reading!</p>]]></content>
      
      
      
        <tags>
            
            <tag> 笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test1</title>
      <link href="/2021/08/20/test1/"/>
      <url>/2021/08/20/test1/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script><h2 id="标题1"><a href="#标题1" class="headerlink" title="标题1"></a>标题1</h2><pre class="line-numbers language-none"><code class="language-none">printf(&quot;内容&quot;); &#x2F;&#x2F;代码1<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="标题2"><a href="#标题2" class="headerlink" title="标题2"></a>标题2</h3><p><em>内容</em></p><h4 id="标题3"><a href="#标题3" class="headerlink" title="标题3"></a>标题3</h4><p><strong>内容</strong></p><h2 id="标题4"><a href="#标题4" class="headerlink" title="标题4"></a>标题4</h2><p><u>内容</u></p><h2 id="标题5"><a href="#标题5" class="headerlink" title="标题5"></a>标题5</h2><p><del>内容</del></p>]]></content>
      
      
      
        <tags>
            
            <tag> test </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/08/19/hello-world/"/>
      <url>/2021/08/19/hello-world/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.css"><script src="https://cdn.jsdelivr.net/npm/aplayer@latest/dist/APlayer.min.js" class="aplayer-secondary-script-marker"></script><script class="meting-secondary-script-marker" src="https://cdn.jsdelivr.net/npm/meting@1/dist/Meting.min.js"></script>    <div id="aplayer-RTpLkghk" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="3986040" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#555"    ></div><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>    <div id="aplayer-fraLcfnE" class="aplayer aplayer-tag-marker meting-tag-marker"         data-id="31654455" data-server="netease" data-type="song" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="auto" data-theme="#ad7a86"    ></div><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
